sample <- raster::intersect(dummy, buffer)
sample@data <- sample@data %>% mutate(x=as.numeric(sample@coords[,'x']), y=as.numeric(sample@coords[,'y']), id=rownames(.)) %>%
tidyr::extract(col=id, into=c('id_sub'), "[[:alnum:]]+[[:punct:]]([[:alnum:]]+)", remove=F) %>%
mutate(id_sub=ifelse(is.na(id_sub), 0, id_sub))
# Get environmental values
rasterstack <- list.files('../features', full.names=T) %>% stack()
# Get environmental values
rasterstack <- list.files('./work/covariates', full.names=T) %>% stack()
sample2 <- raster::extract(rasterstack, sample, sp=T)@data %>%
pivot_longer(cols=-c(code:id_sub), names_to='feat', values_to='val') %>%
tidyr::extract(col=feat, into=c('variable','ts'), "([[:alnum:]]+)_([[:alnum:]]+)") %>%
pivot_wider(id_cols=c(id, ts), names_from = variable, values_from = val)
sample3 <- sample %>% left_join(sample2, by=c('id'='id', 'interval'='ts')) %>%
data.frame() %>%
group_by(code,id_sub, x, y, locality, unit, age_range, references, comment) %>%
dplyr::summarize(across(bio1:npp,mean))
sample4 <- cbind(sample3$y, sample3$y) %>% SpatialPointsDataFrame(sample3)
crs(sample4) <- CRS(EPSG3035$wkt)
saveRDS(sample4, './work/sample/sample_points.rds')
writeOGR(sample4, dsn='./work/sample', layer='sample_points', driver = "ESRI Shapefile")
library(tidyverse)
library(raster)
library(tidyverse)
library(raster)
# Variables
rasterlist <- list.files('./work/covariates', full.names=T)
rasterstack <- stack(rasterlist)
variable_levels = c('bio1','bio2','bio3','bio4','bio5','bio6','bio7','bio8','bio9','bio10','bio11','bio12','bio13','bio14','bio15','bio16','bio17','bio18','bio19','npp','elev')
interval_levels = c()
points <- rasterToPoints(rasterstack) %>% data.frame() %>%
filter(complete.cases(.)) %>%  # Remove NAs
mutate(id=as.numeric(rownames(.))) %>% # create a point ID
pivot_longer(cols=-c(id,x,y), names_to='feat', values_to='val') %>%
extract(col=feat, into=c('variable','interval'), "([[:alnum:]]+)_([[:alnum:]]+)") %>% # separate variables and timeslices
mutate(variable = factor(variable, levels = c('bio1','bio2','bio3','bio4','bio5','bio6','bio7','bio8','bio9','bio10','bio11','bio12','bio13','bio14','bio15','bio16','bio17','bio18','bio19','npp','elev'))) %>%
pivot_wider(names_from = variable, values_from = val)
points <- rasterToPoints(rasterstack) %>% data.frame() %>%
filter(complete.cases(.)) %>%  # Remove NAs
mutate(id=as.numeric(rownames(.))) %>% # create a point ID
pivot_longer(cols=-c(id,x,y), names_to='feat', values_to='val') %>%
dplyr::extract(col=feat, into=c('variable','interval'), "([[:alnum:]]+)_([[:alnum:]]+)") %>% # separate variables and timeslices
mutate(variable = factor(variable, levels = c('bio1','bio2','bio3','bio4','bio5','bio6','bio7','bio8','bio9','bio10','bio11','bio12','bio13','bio14','bio15','bio16','bio17','bio18','bio19','npp','elev'))) %>%
pivot_wider(names_from = variable, values_from = val)
points <- rasterToPoints(rasterstack) %>% data.frame() %>%
filter(complete.cases(.)) %>%  # Remove NAs
mutate(id=as.numeric(rownames(.))) %>% # create a point ID
pivot_longer(cols=-c(id,x,y), names_to='feat', values_to='val') %>%
tidyr::extract(col=feat, into=c('variable','interval'), "([[:alnum:]]+)_([[:alnum:]]+)") %>% # separate variables and timeslices
mutate(variable = factor(variable, levels = c('bio1','bio2','bio3','bio4','bio5','bio6','bio7','bio8','bio9','bio10','bio11','bio12','bio13','bio14','bio15','bio16','bio17','bio18','bio19','npp','elev'))) %>%
pivot_wider(names_from = variable, values_from = val)
write.csv(points, './correlation/table.csv')
write.csv(points, './work/correlation/table.csv')
write.csv(points, './work/sample/full_record.csv')
saveRDS(points, './work/sample/full_record.rds')
# Correlation
library(Hmisc)
library(corrplot)
## Pearson
### Correlation
cor1 <- rcorr(points %>% select(-c(x,y,id,interval,npp)) %>% as.matrix(), type=c("pearson"))
## Pearson
### Correlation
cor1 <- rcorr(points %>% dplyr::select(-c(x,y,id,interval,npp)) %>% as.matrix(), type=c("pearson"))
write.csv(cor1$r, './work/correlation/pearson_coeff.csv')
write.csv(cor1$p, './work/correlation/pearson_p-value.csv')
### Correlation plot
tiff("./work/correlation/pearson_coeff.tiff", units="cm", width=15, height=15, res=300)
corrplot(cor1$r, method = "color", type = "upper", order = "hclust",
addCoef.col = "black", number.cex = .5, # add labels
tl.col = "black", tl.srt = 90)
dev.off()
## Spearman
### Correlation
cor2 <- rcorr(points %>% select(-c(x,y,id,interval,npp)) %>% as.matrix(), type=c("spearman"))
## Spearman
### Correlation
cor2 <- rcorr(points %>% dplyr::select(-c(x,y,id,interval,npp)) %>% as.matrix(), type=c("spearman"))
write.csv(cor2$r, './work/correlation/spearman_coeff.csv')
write.csv(cor2$p, './work/correlation/spearman_p-value.csv')
### Correlation plot
tiff("./work/correlation/spearman_coeff.tiff", units="cm", width=15, height=15, res=300)
corrplot(cor2$r, method = "color", type = "upper", order = "hclust",
addCoef.col = "black", number.cex = .5, # add labels
tl.col = "black", tl.srt = 90)
dev.off()
## Correlation chart
library(PerformanceAnalytics)
tiff("./work/correlation/correlation_chart.tiff", units="cm", width=40, height=40, res=300)
chart.Correlation(points %>% sample_n(100000) %>% select(-c(x,y,id,interval,npp)), histogram=TRUE, pch=20)
dev.off()
## Correlation chart
library(PerformanceAnalytics)
tiff("./work/correlation/correlation_chart.tiff", units="cm", width=40, height=40, res=300)
chart.Correlation(points %>% sample_n(100000) %>% dplyr::select(-c(x,y,id,interval,npp)), histogram=TRUE, pch=20)
dev.off()
library(dplyr)
library(tidyr)
library(dismo)
options(java.parameters = "-Xmx20g" )
jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
library(ENMeval) #v2.0.0
library(terra)
detach("package:terra", unload = TRUE)
install.packages("terra")
library(dplyr)
library(tidyr)
library(dismo)
options(java.parameters = "-Xmx20g" )
jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
library(ENMeval) #v2.0.0
library(tidyverse)
library(ENMeval) #v2.0.0
set.seed(31)
#### Evaluate combinations of FCs and RMs ----
# load data and set type, where 0=background, 1=sample, as indicated in dismo::maxent
sample <- readRDS('./work/sample/sample_points.RDS')@data %>%
as.data.frame() %>%
drop_na(bio1:npp) %>%
mutate(type=1)
background <- readRDS('./work/sample/background_sample_points.RDS') %>%
mutate(type=0)
#### Evaluate combinations of FCs and RMs ----
# load data and set type, where 0=background, 1=sample, as indicated in dismo::maxent
covariates <- c(x,y,bio1,bio2,bio7,bio12,bio15,elev)
covariates <- c('x','y','bio1','bio2','bio7','bio12','bio15','elev')  # Covariates selected in script 1.2_covariates_selection
sample <- readRDS('./work/sample/sample_points.RDS')@data %>%
as.data.frame() %>%
drop_na(bio1:npp) %>%
mutate(type=1) %>%
select(covariates)
sample <- readRDS('./work/sample/sample_points.RDS')@data %>%
as.data.frame() %>%
drop_na(bio1:npp) %>%
mutate(type=1) %>%
select(all_of(covariates))
background <- readRDS('./work/sample/background_sample_points.RDS') %>%
mutate(type=0) %>%
select(all_of(covariates))
set.seed(31)
sample <- readRDS('./work/sample/sample_points.RDS')@data %>%
as.data.frame() %>%
drop_na(bio1:npp) %>%
mutate(type=1) %>%
select(all_of(covariates))
background <- readRDS('./work/sample/background_sample_points.RDS') %>%
mutate(type=0) %>%
select(all_of(covariates))
user.grp <- list(occs.grp = sample %>% pull(code), # Make sure that NO number is missing
bg.grp = rep(unique(sample$code), length.out=nrow(background)))
sample <- readRDS('./work/sample/sample_points.RDS')@data %>%
as.data.frame() %>%
drop_na(bio1:npp) %>%
mutate(type=1)
occurence %>% select(all_of(covariates))
sample <- readRDS('./work/sample/sample_points.RDS')@data %>%
as.data.frame() %>%
drop_na(bio1:npp) %>%
mutate(type=1)
occurence <- sample %>% select(all_of(covariates))
background <- readRDS('./work/sample/background_sample_points.RDS') %>%
mutate(type=0) %>%
select(all_of(covariates))
user.grp <- list(occs.grp = sample %>% pull(code), # Make sure that NO number is missing
bg.grp = rep(unique(sample$code), length.out=nrow(background)))
View(user.grp)
# Evaluate models
maxent_eval <- ENMevaluate(occs=occurrence,
bg=background,
algorithm='maxent.jar',
partitions='user',
user.grp=user.grp,
tune.args = list(
fc=c('L','LQ','LQH', 'LQP', 'LQHP', 'LQHPT'),
rm=c(0.2,0.4,0.6,0.8,1,1.5,2,3,4)),
parallel=T)
#library(dismo)
#options(java.parameters = "-Xmx20g" )
#jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
library(ENMeval) #v2.0.0
#library(dismo)
options(java.parameters = "-Xmx20g" )
jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
# Evaluate models
maxent_eval <- ENMevaluate(occs=occurrence,
bg=background,
algorithm='maxent.jar',
partitions='user',
user.grp=user.grp,
tune.args = list(
fc=c('L','LQ','LQH', 'LQP', 'LQHP', 'LQHPT'),
rm=c(0.2,0.4,0.6,0.8,1,1.5,2,3,4)),
parallel=T)
library(dismo)
options(java.parameters = "-Xmx20g" )
jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
library(ENMeval) #v2.0.0
# Evaluate models
maxent_eval <- ENMevaluate(occs=occurrence,
bg=background,
algorithm='maxent.jar',
partitions='user',
user.grp=user.grp,
tune.args = list(
fc=c('L','LQ','LQH', 'LQP', 'LQHP', 'LQHPT'),
rm=c(0.2,0.4,0.6,0.8,1,1.5,2,3,4)),
parallel=T)
library(tidyverse)
library(dismo)
library(raster)
set.seed(31)
maxent_model <- readRDS('./work/maxent_model_selection/maxent_eval_select.RDS')
# Load covariates
rasterlist <- list.files('./work/covariates', full.names=F) %>% as.data.frame() %>% rename(name=1) %>%
tidyr::extract(col=name, into=c('variable','interval'), "([[:alnum:]]+)_([[:alnum:]]+)", remove=F)
library(tidyverse)
library(dismo)
library(raster)
set.seed(31)
maxent_model <- readRDS('./work/maxent_model_selection/maxent_eval_select.RDS')
# Load covariates
rasterlist <- list.files('./work/covariates', full.names=F) %>% as.data.frame() %>% rename(name=1) %>%
tidyr::extract(col=name, into=c('variable','interval'), "([[:alnum:]]+)_([[:alnum:]]+)", remove=F)
View(rasterlist)
list_variables <- unique(rasterlist$variable)
list_intervals <- unique(rasterlist$interval)
library(dismo)
library(raster)
library(readxl)
set.seed(31)
maxent_model <- readRDS('../maxent/maxent_eval_select.RDS')
maxent_model <- readRDS('../maxent_model_selection/maxent_eval_select.RDS')
maxent_model <- readRDS('./work/maxent_model_selection/maxent_eval_select.RDS')
sites <- read_excel("./data/Sites MIS11-MIS14_predicted.xlsx",
col_types = c("numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "numeric", "numeric",
"numeric"))
sites <- read_excel("./work/maxent_model_predction/Sites MIS11-MIS14_predicted.xlsx",     # Excel file with predicted values for each site
col_types = c("numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "numeric", "numeric",
"numeric"))
sites <- read_excel("./work/maxent_model_predction/Sites MIS11-MIS14_predicted.xlsx",     # Excel file with predicted values for each site
col_types = c("numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "numeric", "numeric",
"numeric"))
sites <- read_excel("./work/maxent_model_prediction/Sites MIS11-MIS14_predicted.xlsx",     # Excel file with predicted values for each site
col_types = c("numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "numeric", "numeric",
"numeric"))
rasterlist <- list.files('./work/maxent_model_predict/', full.names=T, pattern='pred_mean')
rasterlist <- list.files('./work/maxent_model_predict', full.names=T, pattern='pred_mean')
rasterlist <- list.files('./work/maxent_model_prediction', full.names=T, pattern='pred_mean')
rasterlist
# Reclassify
for(r in rasterlist){
basename(r)
rfile <- raster(r) > thrs
writeRaster(rfile, paste('./work/maxent_model_classificaiton/range_',basename(r), sep=''), overwrite=TRUE)
}
library(raster)
library(tidyverse)
library(dismo)
library(cowplot)
maxent_model <- readRDS('./work/maxent_model_selection/maxent_eval_select.RDS')
feature_importance <- data.frame(feature=factor(c('BIO1', 'BIO15', 'BIO12','BIO7','BIO2', 'Elevation','BIO1', 'BIO15', 'BIO12','BIO7','BIO2', 'Elevation'), levels=c('BIO12', 'BIO15', 'BIO1','BIO2', 'Elevation','BIO7'),ordered = T),
indicator=c('contribution', 'contribution', 'contribution', 'contribution','contribution', 'contribution', 'permutation importance', 'permutation importance', 'permutation importance', 'permutation importance', 'permutation importance', 'permutation importance'),
value=c(35.2479,29.4679,22.3875,7.7451,4.2089,0.9427,23.2646,23.7045,34.5552,3.6263,10.6631,4.1863)
)
View(feature_importance)
plt_feature_importance <- ggplot(data=feature_importance, aes(x=feature, y=value, fill=indicator))+
geom_bar(stat='identity', position=position_dodge())+
geom_text(aes(label=round(value)), vjust=0.5, hjust=1.1, color="black",
position = position_dodge(0.9), size=2)+
scale_fill_manual(values=c('#eab676','#76b5c5'))+
labs(x='Feature', y="Percentage", fill='Measure')+
scale_x_discrete(limits = rev(levels(feature_importance$feature)))+
coord_flip()+
theme_cowplot(font_size = 7, font_family = 'sans')+
theme(text = element_text(size = 7, family='sans'))
plot(plt_feature_importance)
# Plot variables
model_data <- bind_rows('Presence'=maxent_model@presence, 'Background'=maxent_model@absence, .id='type') %>% pivot_longer(-c(type), names_to = 'feature')
model_data <- bind_rows('Presence'=maxent_model@presence, 'Background'=maxent_model@absence, .id='type') %>%
pivot_longer(-c(type), names_to = 'feature')
View(feature_importance)
View(model_data)
model_data$feature <- model_data$feature  %>% recode_factor(bio12='BIO12',bio15='BIO15',bio1='BIO1',bio2='BIO2', elev='Elevation', bio7='BIO7')
View(model_data)
library(tidyverse)
library(dismo)
library(cowplot)
maxent_model <- readRDS('./work/maxent_model_selection/maxent_eval_select.RDS')
# Plot variables
model_data <- bind_rows('Presence'=maxent_model@presence, 'Background'=maxent_model@absence, .id='type') %>% pivot_longer(-c(type), names_to = 'feature')
model_data$feature <- model_data$feature  %>% recode_factor(bio12='BIO12',bio15='BIO15',bio1='BIO1',bio2='BIO2', elev='Elevation', bio7='BIO7')
View(model_data)
plt_dens <- ggplot(data=model_data, aes(x=value, fill=type))+
geom_density(alpha=0.6)+
facet_wrap(.~feature, scales='free', nrow=1)+
scale_fill_manual(values=c('grey','red'))+
labs(x='', y="Density", fill='')+
theme_cowplot(font_size = 7, font_family = 'sans')+
theme(text = element_text(size = 7, family='sans'),
strip.text = element_text(size = rel(1)),
strip.background = element_rect(fill = NA, colour = 'black', size = 0.4))
plot(plt_dens)
# Combine
bottom_row <- plot_grid(
NA, plt_feature_importance,
labels = c('b', 'c'), rel_widths = c(1, 1.5), label_size = 7
)
plot(bottom_row)
# Combine
bottom_row <- plot_grid(
NA, plt_feature_importance,
labels = c('b', 'c'), rel_widths = c(1, 1.5), label_size = 7
)
# Plot feature importance
View(maxent_model@results)  # Just copy-paste the values because this list is difficult to transform
feature_importance <- data.frame(feature=factor(c('BIO1', 'BIO15', 'BIO12','BIO7','BIO2', 'Elevation','BIO1', 'BIO15', 'BIO12','BIO7','BIO2', 'Elevation'), levels=c('BIO12', 'BIO15', 'BIO1','BIO2', 'Elevation','BIO7'),ordered = T),
indicator=c('contribution', 'contribution', 'contribution', 'contribution','contribution', 'contribution', 'permutation importance', 'permutation importance', 'permutation importance', 'permutation importance', 'permutation importance', 'permutation importance'),
value=c(35.2479,29.4679,22.3875,7.7451,4.2089,0.9427,23.2646,23.7045,34.5552,3.6263,10.6631,4.1863)
)
plt_feature_importance <- ggplot(data=feature_importance, aes(x=feature, y=value, fill=indicator))+
geom_bar(stat='identity', position=position_dodge())+
geom_text(aes(label=round(value)), vjust=0.5, hjust=1.1, color="black",
position = position_dodge(0.9), size=2)+
scale_fill_manual(values=c('#eab676','#76b5c5'))+
labs(x='Feature', y="Percentage", fill='Measure')+
scale_x_discrete(limits = rev(levels(feature_importance$feature)))+
coord_flip()+
theme_cowplot(font_size = 7, font_family = 'sans')+
theme(text = element_text(size = 7, family='sans'))
plot(plt_feature_importance)
# Combine
bottom_row <- plot_grid(
NA, plt_feature_importance,
labels = c('b', 'c'), rel_widths = c(1, 1.5), label_size = 7
)
plot(bottom_row)
# Combine
bottom_row <- plot_grid(
NA, plt_feature_importance,
labels = c('b', 'c'), rel_widths = c(1, 1.5), label_size = 7
)
plot(bottom_row)
plot_grid(plt_dens, bottom_row, labels = c('a', ''), label_size = 7, ncol = 1, rel_heights = c(0.75,1))
## Export panel leaving free space for B
tiff("./results/fig_model_performance/fig_model_performance.tiff", units="cm", width=18.3, height=10, res=600)
plot_grid(plt_dens, bottom_row, labels = c('a', ''), label_size = 7, ncol = 1, rel_heights = c(0.75,1))
dev.off()
## Export panel leaving free space for B
tiff("./results/fig_model_performance/fig_model_performance.tiff", units="cm", width=18.3, height=10, res=600)
plot_grid(plt_dens, bottom_row, labels = c('a', ''), label_size = 7, ncol = 1, rel_heights = c(0.75,1))
dev.off()
# Scatterplot (B) to be added with a graphics program
library(plot3D)
presence_points <- maxent_model@presence
absence_points <- maxent_model@absence
#svg("fig_3dscatter.svg", width=7.32, height=5.71, pointsize=7)
#tiff("fig_3dscatter.tiff", units="px", width=1729, height=1181, pointsize = 7, res=600)
par(mar = c(0, 0, 0, 0))
plt_scatter <- scatter3D(x=absence_points$bio12, y=absence_points$bio15, z=absence_points$bio1,
col = 'black',
pch = 20,
cex = 0.15,
colkey = FALSE,
bty = "b2",
ticktype = "detailed",
#xlab = 'BIO12', ylab='BIO7',zlab = "BIO15",
xlab = '', ylab='',zlab = "",
cex.lab=1, cex.axis=1, line=2,
alpha=.2)
plt_scatter <- scatter3D(x=presence_points$bio12, y=presence_points$bio15, z=presence_points$bio1,
col = 'red',
pch = 20,0,
cex = 0.15,
add = TRUE)
library(raster)
library(dplyr)
# Variables
path <- 'C:/cs/geodata/Oscillayers' # set path to oscillayer dataset
studyarea <- shapefile('../data/study_area.shp')
library(raster)
library(dplyr)
studyarea <- shapefile('../data/study_area.shp')
studyarea <- shapefile('./data/study_area.shp')
targetdir = paste(getwd(),'oscillayer', sep='/')
targetdir = paste(getwd(),'work/oscillayer', sep='/')
library(raster)
library(dplyr)
library(readxl)
library(readr)
# Variables
studyarea <- shapefile('./data/study_area.shp')
zipfile <- 'C:/cs/geodata/Oscillayers/INPUT.zip' # Link to the oscillayers dataset
timeslices <- read_excel("./data/timeslices.xlsx")
scaling_factors <- unzip(zipfile, files='Scaling_factor_TabS1.csv') %>%
read_csv(locale = locale(encoding = "ISO-8859-1")) %>%
rename() %>% rename(age=1,Oscillayer=2,TS=3,sealevel=4,temperature=5,scaling_factor=6)
timeslices <- timeslices %>% left_join(scaling_factors)
## Load and clip bathymetric DEM
dem <- unzip(zipfile, files='ETOPO1_res.asc') %>%
raster() %>%
crop(studyarea)
crs(dem) <- '+init=epsg:4326'
## Load and clip bathymetric DEM
dem <- unzip(zipfile, files='ETOPO1_res.asc') %>%
raster() %>%
crop(studyarea)
crs(dem) <- '+init=epsg:4326'
sealevels <- timeslices %>% group_by(MIS) %>% summarise(msealevel=mean(sealevel))
library(tidyverse)
library(dismo)
library(ENMeval) #v2.0.0
set.seed(31)
covariates <- c('x','y','bio1','bio2','bio7','bio12','bio15','elev')  # Covariates selected in script 1.2_covariates_selection
maxent_eval <- readRDS('./work/maxent_model_selection/maxent_eval.RDS')
# plot model evalutaion
library(RColorBrewer)
evaldata <- maxent_eval@results %>% pivot_longer(-c(fc:tune.args), names_to='criterion', values_to='val') %>%
filter(criterion %in% c('delta.AICc','or.10p.avg','auc.val.avg')) %>%
mutate(fc=factor(fc, levels=c('L','LQ','LQH', 'LQP', 'LQHP', 'LQHPT')),
rm=as.numeric(as.character(rm)),
criterion=factor(criterion, levels=c('delta.AICc','or.10p.avg','auc.val.avg'), labels=c('Delta AICc','OR .10','AUC test')))
evalplot <- ggplot(data=evaldata, aes(x=rm, y=val, group=fc, color=fc))+
geom_vline(xintercept=1, linetype='dashed')+
geom_point()+
geom_line()+
facet_wrap(~criterion,
scales='free_y',
strip.position ='top')+
labs(x='Regularization multiplier', y='', color='Feature class')+
scale_x_continuous(limits=c(0,4))+
scale_color_brewer(palette = "Dark2")+
theme_bw()+
theme(
strip.text = element_text(size = rel(1)),
strip.background = element_rect(fill = NA, colour = 'black', size = 0.4)
)
plot(evalplot)
svg("./results/fig_model_evaluation.svg", units="cm", width=19, height=6)
evalplot
dev.off()
dev.off()
svg("./results/fig_model_evaluation.svg", units="cm", width=19, height=6)
evalplot
dev.off()
svg("./results/fig_model_evaluation.svg", width=19, height=6)
evalplot
dev.off()
eps("./results/fig_model_evaluation.eps", width=18.3, height=6)
evalplot
dev.off()
install.packages("R.utils")
library(r:utils)
library(R.utils)
eps("./results/fig_model_evaluation.eps", width=18.3, height=6)
evalplot
dev.off()
ggsave("./results/fig_model_evaluation.eps", units="cm", width=18.3, height=6, dpi=600)
evalplot
ggsave("./results/fig_model_evaluation.eps", units="cm", width=18.3, height=6, dpi=600)
library(tidyverse)
library(dismo)
library(cowplot)
maxent_model <- readRDS('./work/maxent_model_selection/maxent_eval_select.RDS')
## Plot sample and background densities (A)
model_data <- bind_rows('Presence'=maxent_model@presence, 'Background'=maxent_model@absence, .id='type') %>% pivot_longer(-c(type), names_to = 'feature')
model_data$feature <- model_data$feature  %>% recode_factor(bio12='BIO12',bio15='BIO15',bio1='BIO1',bio2='BIO2', elev='Elevation', bio7='BIO7')
plt_dens <- ggplot(data=model_data, aes(x=value, fill=type))+
geom_density(alpha=0.6)+
facet_wrap(.~feature, scales='free', nrow=1)+
scale_fill_manual(values=c('grey','red'))+
labs(x='', y="Density", fill='')+
theme_cowplot(font_size = 7, font_family = 'sans')+
theme(text = element_text(size = 7, family='sans'),
strip.text = element_text(size = rel(1)),
strip.background = element_rect(fill = NA, colour = 'black', size = 0.4))
plot(plt_dens)
## Plot feature importance (C)
View(maxent_model@results)  # Just copy-paste the values because this list is difficult to transform
feature_importance <- data.frame(feature=factor(c('BIO1', 'BIO15', 'BIO12','BIO7','BIO2', 'Elevation','BIO1', 'BIO15', 'BIO12','BIO7','BIO2', 'Elevation'), levels=c('BIO12', 'BIO15', 'BIO1','BIO2', 'Elevation','BIO7'),ordered = T),
indicator=c('contribution', 'contribution', 'contribution', 'contribution','contribution', 'contribution', 'permutation importance', 'permutation importance', 'permutation importance', 'permutation importance', 'permutation importance', 'permutation importance'),
value=c(35.2479,29.4679,22.3875,7.7451,4.2089,0.9427,23.2646,23.7045,34.5552,3.6263,10.6631,4.1863)
)
plt_feature_importance <- ggplot(data=feature_importance, aes(x=feature, y=value, fill=indicator))+
geom_bar(stat='identity', position=position_dodge())+
geom_text(aes(label=round(value)), vjust=0.5, hjust=1.1, color="black",
position = position_dodge(0.9), size=2)+
scale_fill_manual(values=c('#eab676','#76b5c5'))+
labs(x='Feature', y="Percentage", fill='Measure')+
scale_x_discrete(limits = rev(levels(feature_importance$feature)))+
coord_flip()+
theme_cowplot(font_size = 7, font_family = 'sans')+
theme(text = element_text(size = 7, family='sans'))
plot(plt_feature_importance)
plt_feature_importance <- ggplot(data=feature_importance, aes(x=feature, y=value, fill=indicator))+
geom_bar(stat='identity', position=position_dodge())+
geom_text(aes(label=round(value)), vjust=0.5, hjust=1.1, color="black",
position = position_dodge(0.9), size=2)+
scale_fill_manual(names=c('A', 'B'),
values=c('#eab676','#76b5c5'))+
labs(x='Feature', y="Percentage", fill='Measure')+
scale_x_discrete(limits = rev(levels(feature_importance$feature)))+
coord_flip()+
theme_cowplot(font_size = 7, font_family = 'sans')+
theme(text = element_text(size = 7, family='sans'))
plot(plt_feature_importance)
