library(raster)
library(dplyr)
# Variables
setwd('./work/')
# set projection
library(sf)
EPSG3035 <- st_crs(3035)
dummy <- raster('../oscillayer/bio1_MIS11ab.tif') %>%
projectRaster(crs=EPSG3035$wkt)
dummy <- raster('./oscillayer/bio1_MIS11ab.tif') %>%
projectRaster(crs=EPSG3035$wkt)
# Warp Elevation
list_elev <- list.files('../elevation/', full.names = T, pattern='.tif')
# Warp Elevation
list_elev <- list.files('./oscillayer/', full.names = T, pattern='.tif')
# Warp Elevation
list_elev <- list.files('./elevation/', full.names = T, pattern='.tif')
# Warp Elevation
list_elev <- list.files('./elevation/', full.names = T, pattern='.tif')
for(i in list_elev){
raster(i) %>%
projectRaster(to=dummy) %>%
writeRaster(filename=basename(i), format="GTiff", overwrite=TRUE)
}
warniings()
warnings()
# Warp Oscillayer
list_oscillayer <- list.files('../oscillayer/', full.names = T, pattern='MIS')
# Warp Oscillayer
list_oscillayer <- list.files('./oscillayer/', full.names = T, pattern='MIS')
for(i in list_oscillayer){
raster(i) %>%
projectRaster(to=dummy) %>%
writeRaster(filename=basename(i), format="GTiff", overwrite=TRUE)
}
library(raster)
library(dplyr)
getwd()
library(raster)
library(dplyr)
# set projection
library(sf)
EPSG3035 <- st_crs(3035)
dummy <- raster('./work/oscillayer/bio1_MIS11ab.tif') %>%
projectRaster(crs=EPSG3035$wkt)
# Warp Elevation
list_elev <- list.files('.work/elevation/', full.names = T, pattern='.tif')
# Warp Elevation
list_elev <- list.files('.work/elevation/', full.names = T, pattern='.tif')
# Warp Elevation
list_elev <- list.files('./work/elevation/', full.names = T, pattern='.tif')
for(i in list_elev){
raster(i) %>%
projectRaster(to=dummy) %>%
writeRaster(filename=paste('./work/covariates/', basename(i)), format="GTiff", overwrite=TRUE)
}
for(i in list_elev){
raster(i) %>%
projectRaster(to=dummy) %>%
writeRaster(filename=paste('./work/covariates/', basename(i)), format="GTiff", overwrite=TRUE)
}
# Warp Oscillayer
list_oscillayer <- list.files('./work/oscillayer/', full.names = T, pattern='MIS')
for(i in list_oscillayer){
raster(i) %>%
projectRaster(to=dummy) %>%
writeRaster(filename=paste('./work/covariates/', basename(i)), format="GTiff", overwrite=TRUE)
}
# Warp NPP
list_npp <- list.files('../npp/', full.names = T, pattern='.tif')
# Warp NPP
list_npp <- list.files('./work/npp/', full.names = T, pattern='.tif')
for(i in list_npp){
raster(i) %>%
projectRaster(to=dummy) %>%
writeRaster(filename=paste('./work/covariates/', basename(i)), format="GTiff", overwrite=TRUE)
}
library(raster)
library(dplyr)
library(readxl)
library(raster)
library(dplyr)
library(readxl)
# Variables
oscill_path <- './work/oscillayer/'
oscill_list <- list.files('../oscillayer/', full.names = T)
tstab <- read_excel("../timeslices.xlsx") %>% distinct(MIS, .keep_all = T)
oscill_list <- list.files('./work/oscillayer/', full.names = T)
tstab <- read_excel("./work/timeslices.xlsx") %>% distinct(MIS, .keep_all = T)
# NPP: Miami model
npp <- function(temp, prec){
npp_temp <- 3000 * (1 + exp(1.315-0.119*temp))
npp_prec <- 3000 * (1 - exp(-0.000664*prec))
return(min(npp_temp, npp_prec))
}
# NPP: Miami model
npp <- function(temp, prec){
npp_temp <- 3000 * (1 + exp(1.315-0.119*temp))
npp_prec <- 3000 * (1 - exp(-0.000664*prec))
return(min(npp_temp, npp_prec))
}
for(intervall in tstab$MIS){
rtemp <- list.files(oscill_path, full.names = T, pattern = paste('bio1',intervall, sep='_')) %>% raster()/10
rprec <- list.files(oscill_path, full.names = T, pattern = paste('bio12',intervall, sep='_')) %>% raster()
rnpp <- npp(rtemp, rprec)
writeRaster(rnpp, filename=paste('./work/npp/npp_',intervall,sep=''), format="GTiff", overwrite=TRUE)
}
library(readxl)
EPSG3035 <- st_crs(3035)  # New CRS
library(sf)
EPSG3035 <- st_crs(3035)  # New CRS
EPSG4326 <- st_crs(4326)  # Original CRS
# Load arch. sites
sites <- read_excel("./data/Sites MIS11-MIS14.xlsx",
sheet = "Niche_modelling_v3", col_types = c("numeric",
"text", "text", "numeric", "numeric",
"text", "text", "text", "text", "text"))
warnings()
coordinates(sites) <- ~long+lat
library(sp)
coordinates(sites) <- ~long+lat
crs(sites) <- CRS(EPSG4326$wkt)
library(raster)
sites <- sites %>% spTransform(CRS(EPSG3035$wkt))
coordinates(sites) <- ~long+lat
# Load arch. sites
sites <- read_excel("./data/Sites MIS11-MIS14.xlsx",
sheet = "Niche_modelling_v3", col_types = c("numeric",
"text", "text", "numeric", "numeric",
"text", "text", "text", "text", "text"))
coordinates(sites) <- ~long+lat
crs(sites) <- CRS(EPSG4326$wkt)
sites <- sites %>% spTransform(CRS(EPSG3035$wkt))
writeOGR(sites, dsn='./work/sample/', layer='arch_sites', driver = "ESRI Shapefile")
library(rgdal)
writeOGR(sites, dsn='./work/sample/', layer='arch_sites', driver = "ESRI Shapefile")
writeOGR(sites, dsn='./work/sample', layer='arch_sites', driver = "ESRI Shapefile")
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif')) %>%
rasterToPoints(spatial=T)
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif')) %>%
rasterToPoints(spatial=T)
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif')) %>%
rasterToPoints(spatial=T)
library(spdplyr)
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif')) %>%
rasterToPoints(spatial=T)
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif')) %>%
rasterToPoints(spatial=T)
library(tidyverse)
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif')) %>%
rasterToPoints(spatial=T)
# Create Sample
## Create an empty raster with the template layout
dummy <- raster()
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif')) %>%
rasterToPoints(spatial=T)
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif'))
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
dummy <- dummy %>%   projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif'))
dummy <-  projectRaster(dummy, to=raster('./work/covariates/bio1_MIS11ab.tif'))
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/oscillayer/bio1_MIS11ab.tif'))
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif'))
library(tidyverse)
library(readxl)
library(sf)
library(sp)
library(raster)
library(rgdal)
library(spdplyr)
# Coordinate Systems
EPSG3035 <- st_crs(3035)  # New CRS
EPSG4326 <- st_crs(4326)  # Original CRS
# Load arch. sites
sites <- read_excel("./data/Sites MIS11-MIS14.xlsx",
sheet = "Niche_modelling_v3", col_types = c("numeric",
"text", "text", "numeric", "numeric",
"text", "text", "text", "text", "text"))
coordinates(sites) <- ~long+lat
crs(sites) <- CRS(EPSG4326$wkt)
sites <- sites %>% spTransform(CRS(EPSG3035$wkt))
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif'))
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif'))
# Create Sample
## Create an empty raster with the template layout
dummy <- raster() %>%
projectRaster(to=raster('./work/covariates/bio1_MIS11ab.tif')) %>%
rasterToPoints(spatial=T)
## Construct sample points
buffer <- buffer(sites, width=10000, dissolve=F)
sample <- raster::intersect(dummy, buffer)
install.packages("rgeos")
sample <- raster::intersect(dummy, buffer)
sample@data <- sample@data %>% mutate(x=as.numeric(sample@coords[,'x']), y=as.numeric(sample@coords[,'y']), id=rownames(.)) %>%
tidyr::extract(col=id, into=c('id_sub'), "[[:alnum:]]+[[:punct:]]([[:alnum:]]+)", remove=F) %>%
mutate(id_sub=ifelse(is.na(id_sub), 0, id_sub))
# Get environmental values
rasterstack <- list.files('../features', full.names=T) %>% stack()
# Get environmental values
rasterstack <- list.files('./work/covariates', full.names=T) %>% stack()
sample2 <- raster::extract(rasterstack, sample, sp=T)@data %>%
pivot_longer(cols=-c(code:id_sub), names_to='feat', values_to='val') %>%
tidyr::extract(col=feat, into=c('variable','ts'), "([[:alnum:]]+)_([[:alnum:]]+)") %>%
pivot_wider(id_cols=c(id, ts), names_from = variable, values_from = val)
sample3 <- sample %>% left_join(sample2, by=c('id'='id', 'interval'='ts')) %>%
data.frame() %>%
group_by(code,id_sub, x, y, locality, unit, age_range, references, comment) %>%
dplyr::summarize(across(bio1:npp,mean))
sample4 <- cbind(sample3$y, sample3$y) %>% SpatialPointsDataFrame(sample3)
crs(sample4) <- CRS(EPSG3035$wkt)
saveRDS(sample4, './work/sample/sample_points.rds')
writeOGR(sample4, dsn='./work/sample', layer='sample_points', driver = "ESRI Shapefile")
library(tidyverse)
library(raster)
library(tidyverse)
library(raster)
# Variables
rasterlist <- list.files('./work/covariates', full.names=T)
rasterstack <- stack(rasterlist)
variable_levels = c('bio1','bio2','bio3','bio4','bio5','bio6','bio7','bio8','bio9','bio10','bio11','bio12','bio13','bio14','bio15','bio16','bio17','bio18','bio19','npp','elev')
interval_levels = c()
points <- rasterToPoints(rasterstack) %>% data.frame() %>%
filter(complete.cases(.)) %>%  # Remove NAs
mutate(id=as.numeric(rownames(.))) %>% # create a point ID
pivot_longer(cols=-c(id,x,y), names_to='feat', values_to='val') %>%
extract(col=feat, into=c('variable','interval'), "([[:alnum:]]+)_([[:alnum:]]+)") %>% # separate variables and timeslices
mutate(variable = factor(variable, levels = c('bio1','bio2','bio3','bio4','bio5','bio6','bio7','bio8','bio9','bio10','bio11','bio12','bio13','bio14','bio15','bio16','bio17','bio18','bio19','npp','elev'))) %>%
pivot_wider(names_from = variable, values_from = val)
points <- rasterToPoints(rasterstack) %>% data.frame() %>%
filter(complete.cases(.)) %>%  # Remove NAs
mutate(id=as.numeric(rownames(.))) %>% # create a point ID
pivot_longer(cols=-c(id,x,y), names_to='feat', values_to='val') %>%
dplyr::extract(col=feat, into=c('variable','interval'), "([[:alnum:]]+)_([[:alnum:]]+)") %>% # separate variables and timeslices
mutate(variable = factor(variable, levels = c('bio1','bio2','bio3','bio4','bio5','bio6','bio7','bio8','bio9','bio10','bio11','bio12','bio13','bio14','bio15','bio16','bio17','bio18','bio19','npp','elev'))) %>%
pivot_wider(names_from = variable, values_from = val)
points <- rasterToPoints(rasterstack) %>% data.frame() %>%
filter(complete.cases(.)) %>%  # Remove NAs
mutate(id=as.numeric(rownames(.))) %>% # create a point ID
pivot_longer(cols=-c(id,x,y), names_to='feat', values_to='val') %>%
tidyr::extract(col=feat, into=c('variable','interval'), "([[:alnum:]]+)_([[:alnum:]]+)") %>% # separate variables and timeslices
mutate(variable = factor(variable, levels = c('bio1','bio2','bio3','bio4','bio5','bio6','bio7','bio8','bio9','bio10','bio11','bio12','bio13','bio14','bio15','bio16','bio17','bio18','bio19','npp','elev'))) %>%
pivot_wider(names_from = variable, values_from = val)
write.csv(points, './correlation/table.csv')
write.csv(points, './work/correlation/table.csv')
write.csv(points, './work/sample/full_record.csv')
saveRDS(points, './work/sample/full_record.rds')
# Correlation
library(Hmisc)
library(corrplot)
## Pearson
### Correlation
cor1 <- rcorr(points %>% select(-c(x,y,id,interval,npp)) %>% as.matrix(), type=c("pearson"))
## Pearson
### Correlation
cor1 <- rcorr(points %>% dplyr::select(-c(x,y,id,interval,npp)) %>% as.matrix(), type=c("pearson"))
write.csv(cor1$r, './work/correlation/pearson_coeff.csv')
write.csv(cor1$p, './work/correlation/pearson_p-value.csv')
### Correlation plot
tiff("./work/correlation/pearson_coeff.tiff", units="cm", width=15, height=15, res=300)
corrplot(cor1$r, method = "color", type = "upper", order = "hclust",
addCoef.col = "black", number.cex = .5, # add labels
tl.col = "black", tl.srt = 90)
dev.off()
## Spearman
### Correlation
cor2 <- rcorr(points %>% select(-c(x,y,id,interval,npp)) %>% as.matrix(), type=c("spearman"))
## Spearman
### Correlation
cor2 <- rcorr(points %>% dplyr::select(-c(x,y,id,interval,npp)) %>% as.matrix(), type=c("spearman"))
write.csv(cor2$r, './work/correlation/spearman_coeff.csv')
write.csv(cor2$p, './work/correlation/spearman_p-value.csv')
### Correlation plot
tiff("./work/correlation/spearman_coeff.tiff", units="cm", width=15, height=15, res=300)
corrplot(cor2$r, method = "color", type = "upper", order = "hclust",
addCoef.col = "black", number.cex = .5, # add labels
tl.col = "black", tl.srt = 90)
dev.off()
## Correlation chart
library(PerformanceAnalytics)
tiff("./work/correlation/correlation_chart.tiff", units="cm", width=40, height=40, res=300)
chart.Correlation(points %>% sample_n(100000) %>% select(-c(x,y,id,interval,npp)), histogram=TRUE, pch=20)
dev.off()
## Correlation chart
library(PerformanceAnalytics)
tiff("./work/correlation/correlation_chart.tiff", units="cm", width=40, height=40, res=300)
chart.Correlation(points %>% sample_n(100000) %>% dplyr::select(-c(x,y,id,interval,npp)), histogram=TRUE, pch=20)
dev.off()
